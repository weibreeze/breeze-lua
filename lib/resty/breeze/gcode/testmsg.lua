-- Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
-- Schema: zj_testmsg.breeze
-- Date: 2020/3/20

local brz_w = require "resty.breeze.writer"
local brz_tools = require "resty.breeze.tools"
local brz_schema = require "resty.breeze.schema"
local brz_field_desc = require "resty.breeze.field_desc"
	
local _M = {_VERSION = "0.0.1"}
local _M_mt = {__index = _M}


	
function _M.new(self, opts)
    local _m_schema = brz_schema:new('idevzTestMessage.TestMsg')

    _m_schema:put_field(brz_field_desc(1, 'myInt', 'int32'))
    _m_schema:put_field(brz_field_desc(2, 'myString', 'string'))
    _m_schema:put_field(brz_field_desc(3, 'myMap', 'packed_map'))
    _m_schema:put_field(brz_field_desc(4, 'myArray', 'packed_array'))
    _m_schema:put_field(brz_field_desc(5, 'subMsg', 'message'))
    _m_schema:put_field(brz_field_desc(6, 'myEnum', 'message'))
    _m_schema:put_field(brz_field_desc(7, 'enumArray', 'packed_array'))

    brz_tools:get_schema_seeker():add_schema('idevzTestMessage.TestMsg', _m_schema)

    local _M_t = {
		_schema = _m_schema,
        myInt = opts.myInt or 0,
        myString = opts.myString or "",
        myMap = opts.myMap or 0,
        myArray = opts.myArray or {},
        subMsg = opts.subMsg or {},
        myEnum = opts.myEnum or {},
        enumArray = opts.enumArray or {}
    }
    return setmetatable(_M_t, _M_mt)
end
	
function _M.write_to(self, buf)
    return brz_w.write_msg_without_type(buf, function(fbuf)

        brz_w.write_int32_field(fbuf, 1, self.myInt)
        brz_w.write_string_field(fbuf, 2, self.myString)
        local myMap_size = brz_tools.arr_size(self.myMap)
        
        if myMap_size > 0 then
            brz_w.write_map_field(fbuf, 3, myMap_size, function(fbuf)
                local _, mt_v = next(self.myMap)
                brz_w.write_string_type(fbuf)
                brz_w.write_message_type(fbuf, mt_v:get_name())
                for k,v in pairs(self.myMap) do
                    brz_w.write_string(fbuf, k, false)
                    v:write_to(fbuf)
                end
            end)
        end
        

        local myArray_size = #self.myArray
        if myArray_size > 0 then
            brz_w.write_array_field(fbuf, 4, myArray_size, function(fbuf)
                local mt_v = self.myArray[1]
                brz_w.write_message_type(fbuf, mt_v:get_name())
                for _,v in ipairs(self.myArray) do
                    v:write_to(fbuf)
                end
            end)
        end
        if self.subMsg ~= nil then
            brz_w.write_message_field(fbuf, 5, self.subMsg)
        end
        if self.myEnum ~= nil then
            brz_w.write_message_field(fbuf, 6, self.myEnum)
        end



        local enumArray_size = #self.enumArray
        if enumArray_size > 0 then
            brz_w.write_array_field(fbuf, 7, enumArray_size, function(fbuf)
                local first = true
                for _,v in ipairs(self.enumArray) do
                    if first then
                        brz_w.write_message_type(fbuf, v:get_name())
                        first = false
                    end
                    v:write_to(fbuf)
                end
            end)
        end
        
    end)
end
	
function _M.get_name(self)
    return self._schema:get_name()
end

function _M.is_breeze_msg(self)
    return true
end

return _M
	