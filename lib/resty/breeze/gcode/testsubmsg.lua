-- Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
-- Schema: zj_testmsg.breeze
-- Date: 2020/3/31

local brz_w = require "resty.breeze.writer"
local brz_tools = require "resty.breeze.tools"
local brz_schema = require "resty.breeze.schema"
local brz_field_desc = require "resty.breeze.field_desc"
	
local _M = {_VERSION = "0.0.1"}
local _M_mt = {__index = _M}
	
function _M.new(self, opts)
    local _m_schema = brz_schema:new('idevzTestMessage.TestSubMsg')

    _m_schema:put_field(brz_field_desc(1, 'myString', 'string'))
    _m_schema:put_field(brz_field_desc(2, 'myInt', 'int32'))
    _m_schema:put_field(brz_field_desc(3, 'myInt64', 'int64'))
    _m_schema:put_field(brz_field_desc(4, 'myFloat32', 'float32'))
    _m_schema:put_field(brz_field_desc(5, 'myFloat64', 'float64'))
    _m_schema:put_field(brz_field_desc(6, 'myByte', 'byte'))
    _m_schema:put_field(brz_field_desc(7, 'myBytes', 'bytes'))
    _m_schema:put_field(brz_field_desc(8, 'myMap1', 'packed_map'))
    _m_schema:put_field(brz_field_desc(9, 'myMap2', 'packed_map'))
    _m_schema:put_field(brz_field_desc(10, 'myArray', 'packed_array'))
    _m_schema:put_field(brz_field_desc(11, 'myBool', 'bool'))

    brz_tools:get_schema_seeker():add_schema('idevzTestMessage.TestSubMsg', _m_schema)

    local _M_t = {
		_schema = _m_schema,
        myString = opts.myString or "",
        myInt = opts.myInt or 0,
        myInt64 = opts.myInt64 or 0,
        myFloat32 = opts.myFloat32 or 0,
        myFloat64 = opts.myFloat64 or 0,
        myByte = opts.myByte or nil,
        myBytes = opts.myBytes or nil,
        myMap1 = opts.myMap1 or {},
        myMap2 = opts.myMap2 or {},
        myArray = opts.myArray or {},
        myBool = opts.myBool
    }
    return setmetatable(_M_t, _M_mt)
end
function _M.write_to(self, buf)
	return brz_w.write_msg_without_type(buf, function(fbuf)
        brz_w.write_string_field(fbuf, 1, self.myString)
        brz_w.write_int32_field(fbuf, 2, self.myInt)
        brz_w.write_int64_field(fbuf, 3, self.myInt64)
        brz_w.write_float32_field(fbuf, 4, self.myFloat32)
        brz_w.write_float64_field(fbuf, 5, self.myFloat64)
        brz_w.write_byte_field(fbuf, 6, self.myByte)
        brz_w.write_bytes_field(fbuf, 7, self.myBytes)

        local myMap1_size = brz_tools.arr_size(self.myMap1)
        if myMap1_size > 0 then
            brz_w.write_packed_map_field(fbuf, 8, myMap1_size, function(fbuf)
                brz_w.write_string_type(fbuf)
                brz_w.write_bytes_type(fbuf)
                for k,v in pairs(self.myMap1) do
                    brz_w.write_string(fbuf, k, false)
                    brz_w.write_bytes(fbuf, v, false)
                end
            end)
        end

        local myMap2_size = brz_tools.arr_size(self.myMap2)
        if myMap2_size > 0 then
            brz_w.write_packed_map_field(fbuf, 9, myMap2_size, function(fbuf)
                brz_w.write_int32_type(fbuf)
                brz_w.write_packed_array_type(fbuf)
                for k,v in pairs(self.myMap2) do
                    brz_w.write_int32(fbuf, k, false)
                    
                    brz_w.write_packed_array(fbuf, false, #v, function(fbuf)
                        brz_w.write_int32_type(fbuf)
                        for vk,vv in ipairs(v) do
                            brz_w.write_int32(fbuf, vv, false)
                        end
                    end)

                end
            end)
        end

        local myArray_size = #self.myArray
        if myArray_size > 0 then
            brz_w.write_packed_array_field(fbuf, 10, myArray_size, function(fbuf)
                brz_w.write_int32_type(fbuf)
                for _, v in ipairs(self.myArray) do
                    brz_w.write_int32(fbuf, v, false)
                end
            end)
        end
        brz_w.write_bool_field(fbuf, 11, self.myBool)
    end)
end
	
function _M.get_name(self)
    return self._schema:get_name()
end

function _M.is_breeze_msg(self)
    return true
end

return _M
	